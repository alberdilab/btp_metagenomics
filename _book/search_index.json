[["index.html", "AlberdiLab | Manuscript in prep Brush-tail possum metagenomics 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Manuscript in prep Brush-tail possum metagenomics Lukas Fix, Antton Alberdi, Raphael Eisenhofer[University of Copenhagen, raphael.eisenhofer@sund.ku.dk] 2025-03-31 1 Introduction 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/btp_metagenomics.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(rairtable) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(broom.mixed) #library(lmerTest) library(Hmsc) library(corrplot) library(lme4) library(nlme) library(ANCOMBC) #for geogrphic visualisation library(rnaturalearth) library(rnaturalearthdata) library(patchwork) "],["prepare-data.html", "2 Prepare data 2.1 Load data", " 2 Prepare data 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. 2.1.1 Sample metadata sample_metadata &lt;- read_tsv(&quot;data/DMB0167_metadata.tsv.gz&quot;) %&gt;% rename(sample=1) 2.1.2 Read counts read_counts &lt;- read_tsv(&quot;data/DMB0167_counts.tsv.gz&quot;) %&gt;% rename(genome=1) %&gt;% select(one_of(c(&quot;genome&quot;,sample_metadata$sample))) 2.1.3 Genome taxonomy genome_metadata &lt;- read_tsv(&quot;data/DMB0167_mag_info.tsv.gz&quot;) %&gt;% rename(length=mag_size)%&gt;% semi_join(., read_counts, by = &quot;genome&quot;) %&gt;% arrange(match(genome,read_counts$genome)) 2.1.4 Genome base hits genome_coverage &lt;- read_tsv(&quot;data/DMB0167_coverage.tsv.gz&quot;) %&gt;% rename(genome=1) %&gt;% select(one_of(c(&quot;genome&quot;,sample_metadata$sample)))%&gt;% semi_join(., genome_metadata, by = &quot;genome&quot;)%&gt;% arrange(match(genome, read_counts$genome)) 2.1.5 Genome tree genome_tree &lt;- read_tree(&quot;data/DMB0167.tree.gz&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=genome_metadata$genome) # keep only MAG tips 2.1.6 Genome annotations Downloading individual annotation files from ERDA using information in Airtable and writing them to a single compressed table takes a while. The following chunk only needs to be run once, to generate the genome_annotations table that is saved in the data directory. Note that the airtable connection requires a personal access token. ##{r airtabler} library(rairtable) Sys.setenv(AIRTABLE_API_KEY = &quot;patmRpNHp5cMxwd8y.ac9b4c3710ad0a2ab334ec3ffa971fb97834f96d0244640f0cedacf0f1d44e22&quot;) ## #```{r Airtabler data} "],["step-1-get-annotation-urls-from-airtable.html", "3 STEP 1: Get annotation URLs from Airtable", " 3 STEP 1: Get annotation URLs from Airtable anno_urls &lt;- airtable( base = “appWbHBNLE6iAsMRV”, table = “tblMzd3oyaJhdeQcs”, view = “viwx4daClBXQW02LB” ) %&gt;% read_airtable(fields = c(“ID”, “mag_name”, “number_genes”, “anno_url”), id_to_col = TRUE) %&gt;% filter( mag_name %in% paste0(genome_metadata$genome, “.fa”), number_genes &gt; 0, !is.na(anno_url), anno_url != “” ) %&gt;% pull(anno_url) "],["step-2-download-and-merge-annotations-with-explicit-column-names.html", "4 STEP 2: Download and merge annotations with explicit column names 4.1 Create working objects 4.2 Prepare color scheme 4.3 Wrap working objects", " 4 STEP 2: Download and merge annotations with explicit column names successful_data &lt;- list() successful_urls &lt;- c() failed_urls &lt;- c() if (length(anno_urls) &gt; 0) { walk(anno_urls, function(url) { tryCatch({ df &lt;- suppressMessages(read_tsv( url, col_types = cols(), col_names = c(“gene”, “genome”, “contig”), skip = 0 # change to 1 if you want to skip header row )) # Keep only the first 3 columns (ignore extras) df &lt;- df[, 1:3] successful_data &lt;&lt;- append(successful_data, list(df)) successful_urls &lt;&lt;- c(successful_urls, url) }, error = function(e) { message(&quot;❌ Failed to read: &quot;, url) failed_urls &lt;&lt;- c(failed_urls, url) }) }) # Save merged data if (length(successful_data) &gt; 0) { bind_rows(successful_data) %&gt;% write_tsv(“data/genome_annotations.tsv.xz”) message(“✅ Merged annotations saved to data/genome_annotations.tsv.xz”) } else { message(“⚠️ No data was successfully read.”) } # Save logs if (length(successful_urls) &gt; 0) { write_lines(successful_urls, “data/successful_annotation_urls.txt”) } if (length(failed_urls) &gt; 0) { write_lines(failed_urls, “data/failed_annotation_urls.txt”) } } else { message(“⚠️ No valid annotation URLs found.”) } #``` 4.1 Create working objects Transform the original data files into working objects for downstream analyses. 4.1.1 Filter reads by coverage min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 4.1.2 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 4.1.3 Distill annotations into GIFTs genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19), verbosity=F) 4.2 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 4.3 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, file = &quot;data/data.Rdata&quot;) "],["data-statistics.html", "5 Data statistics 5.1 Classify Biomes 5.2 Filter Data 5.3 Load Map 5.4 Plot Possum Locations 5.5 Sequencing reads statistics 5.6 DNA fractions 5.7 Recovered microbial fraction", " 5 Data statistics load(&quot;data/data.Rdata&quot;) #Visualisation of geographical location of samples and their respectiv envirotypes # Load the dataset using the provided chunk sample_metadata &lt;- read_tsv(&quot;data/DMB0167_metadata.tsv.gz&quot;) %&gt;% rename(sample=1) Rows: 73 Columns: 19 ── Column specification ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── Delimiter: &quot;\\t&quot; chr (8): EHI_plaintext, sample_code, species, region, sample_type, order, sex, country dbl (11): latitude, longitude, singlem_fraction, reads_post_fastp, host_reads, reads_lost_fastp_percent, metagenomic_bases, host_bases, bases_l... ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. sample_metadata &lt;- sample_metadata %&gt;% mutate(region = case_when( longitude == 146.91 &amp; latitude == -42.32 ~ &quot;Centralhills, Tasmania&quot;, TRUE ~ region # Keep the existing value for other rows )) 5.1 Classify Biomes # Assign biome types based on region names sample_metadata &lt;- sample_metadata %&gt;% mutate(biome_type = case_when( # Cities, towns, and settlements region %in% c(&quot;Hobart&quot;, &quot;Launceston&quot;, &quot;Forth, Tasmania&quot;, &quot;Ringarooma, Tasmania&quot;, &quot;Warren&quot;) ~ &quot;Urban areas&quot;, # Waterways and riparian regions region %in% c(&quot;Dip River, Tasmania&quot;, &quot;Inglis River, Tasmania&quot;) ~ &quot;Waterways and wetland regions&quot;, # Dense vegetation and wooded areas region %in% c(&quot;Mersey Forests, Tasmania&quot;, &quot;Rocky Cape, Tasmania&quot;, &quot;Dryandra&quot;) ~ &quot;Dense vegetation&quot;, # Agricultural or open landscapes region %in% c(&quot;Northern Midlands, Tasmania&quot;, &quot;Pioneer, Tasmania&quot;, &quot;Warren&quot;, &quot;Tasmania&quot;) ~ &quot;Open land&quot;, # Elevated regions with rugged terrain region %in% c(&quot;Mount William, Tasmania&quot;, &quot;Mountain River, Tasmania&quot;, &quot;Ikara-Flinders Ranges National Park&quot;, &quot;Centralhills, Tasmania&quot;) ~ &quot;Elevated, arid terrain&quot;, # Coastal sandy areas region %in% c(&quot;Friendly Beaches, Tasmania&quot;, &quot;Green Beach, Tasmania&quot;) ~ &quot;Coastlines&quot;, # Default for anything unclassified TRUE ~ &quot;Unknown&quot; )) 5.2 Filter Data # Define extended boundary to include all possum data points lat_min &lt;- -45.0 # Slightly smaller than -42.93 lat_max &lt;- -28.0 # Slightly larger than -30.65 lon_min &lt;- 110.0 # Slightly smaller than 116.47 lon_max &lt;- 150.0 # Slightly larger than 148.28 # Full dataset with all points (Tasmania &amp; Australia border) full_possums &lt;- sample_metadata %&gt;% filter(latitude &gt;= lat_min &amp; latitude &lt;= lat_max, longitude &gt;= lon_min &amp; longitude &lt;= lon_max) # Filter for Tasmania only tasmania_possums &lt;- full_possums %&gt;% filter(latitude &lt; -38 &amp; latitude &gt; -45, # Tasmania lat range longitude &gt; 140 &amp; longitude &lt; 150) # Tasmania lon range # Aggregate possum count per location full_possums_count &lt;- full_possums %&gt;% group_by(latitude, longitude, biome_type) %&gt;% summarise(count = n(), .groups = &quot;drop&quot;) tasmania_possums_count &lt;- tasmania_possums %&gt;% group_by(latitude, longitude, biome_type) %&gt;% summarise(count = n(), .groups = &quot;drop&quot;) 5.3 Load Map # Load world map australia_map &lt;- ne_countries(scale = &quot;medium&quot;, returnclass = &quot;sf&quot;) %&gt;% filter(admin == &quot;Australia&quot;) 5.4 Plot Possum Locations # Ensure region are factors full_possums_count &lt;- full_possums_count %&gt;% mutate(region = as.factor(biome_type), ) tasmania_possums_count &lt;- tasmania_possums_count %&gt;% mutate(region = as.factor(biome_type), ) # Get Tasmania data range to set zoom lat_range &lt;- range(tasmania_possums$latitude, na.rm = TRUE) lon_range &lt;- range(tasmania_possums$longitude, na.rm = TRUE) # Count total possums total_full &lt;- sum(full_possums_count$count) total_tasmania &lt;- sum(tasmania_possums_count$count) # Plot 1: Full Dataset (Including Border Data) map_plot_full &lt;- ggplot() + geom_sf(data = australia_map, fill = &quot;lightgray&quot;, color = &quot;black&quot;) + # Base map geom_point(data = full_possums_count, aes(x = longitude, y = latitude, color = biome_type, size = count), alpha = 0.8) + theme_minimal() + labs(title = paste(&quot;PD - Full Dataset (&quot;, total_full, &quot;)&quot;), x = &quot;Longitude&quot;, y = &quot;Latitude&quot;, color = &quot;Environment Type&quot;, size = &quot;Count&quot;) + theme(legend.position = &quot;none&quot;, plot.title = element_text(size = 14, face = &quot;bold&quot;)) # Plot 2: Zoomed-in Tasmania (with entire landmass and cleaned longitude labels) map_plot_zoomed &lt;- ggplot() + geom_sf(data = australia_map, fill = &quot;lightgray&quot;, color = &quot;black&quot;) + # Base map geom_point(data = tasmania_possums_count, aes(x = longitude, y = latitude, color = biome_type, size = count), alpha = 0.8) + coord_sf(xlim = c(143, 149), ylim = c(-44, -39)) + # Full Tasmania view theme_minimal() + labs(title = paste(&quot;PD - Tasmania (&quot;, total_tasmania, &quot;)&quot;), x = &quot;Longitude&quot;, y = &quot;Latitude&quot;, color = &quot;Environment Type&quot;, size = &quot;Count&quot; ) + theme(legend.position = &quot;right&quot;, axis.text.x = element_text(angle = 0, hjust = 0.5), plot.title = element_text(size = 14, face = &quot;bold&quot;)) # Combine the plots side by side with shared legend and increased size (map_plot_full + map_plot_zoomed) + plot_layout(guides = &quot;collect&quot;, widths = c(1, 1.2)) 5.5 Sequencing reads statistics sample_metadata %&gt;% summarise(Total=sum(reads_post_fastp * 150 / 1000000000) %&gt;% round(2), mean=mean(reads_post_fastp * 150 / 1000000000) %&gt;% round(2), sd=sd(reads_post_fastp * 150 / 1000000000) %&gt;% round(2)) %&gt;% unite(&quot;Average&quot;,mean, sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() .table td.tinytable_css_vtr2qe5hgj5vy354gakl, .table th.tinytable_css_vtr2qe5hgj5vy354gakl { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_dxjj5lz4gdmud4qbg4m5, .table th.tinytable_css_dxjj5lz4gdmud4qbg4m5 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } Total Average 354.78 4.86 ± 1.43 5.6 DNA fractions sequence_fractions &lt;- read_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% select(sample,mags,metagenomic_bases,host_bases,bases_lost_fastp_percent) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(lowqual_bases = ((metagenomic_bases+host_bases)/(1-bases_lost_fastp_percent))-(metagenomic_bases+host_bases)) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample, lowqual_bases, host_bases, unmapped_bases, mags_bases) sequence_fractions %&gt;% mutate_at(vars(-sample), ~./1000000000) %&gt;% rename(&quot;Sample&quot;=1, &quot;Low quality&quot;=2, &quot;Mapped to host&quot;=3, &quot;Unmapped&quot;=4, &quot;Mapped to MAGs&quot;=5) %&gt;% tt() .table td.tinytable_css_lxtodfwf53417ffrkdz5, .table th.tinytable_css_lxtodfwf53417ffrkdz5 { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_bi0f1bjbhni95cywc2b6, .table th.tinytable_css_bi0f1bjbhni95cywc2b6 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } Sample Low quality Mapped to host Unmapped Mapped to MAGs EHI01248 0.35511316 0.004968189 2.3488847 8.70559471 EHI01253 0.15065275 0.007306842 0.7958509 3.15690325 EHI01254 0.17713763 0.008641986 0.7698065 3.46426201 EHI01256 0.25601713 0.011186636 1.6153318 4.62283158 EHI01257 0.44278829 0.028219625 1.6424801 6.37891199 EHI01258 0.18025206 0.021893733 0.9061351 3.11043101 EHI01259 0.15785294 0.002551853 1.1230441 3.63491878 EHI01264 0.10980388 0.194713827 0.8459937 1.94399131 EHI01265 0.20096759 0.027838593 0.8781951 4.42282487 EHI01266 0.16495605 0.004145198 1.0104139 3.02528367 EHI01268 0.11654687 0.043538943 0.4199424 2.18818215 EHI01270 0.15490780 0.006255568 0.7491831 1.85948097 EHI01271 0.08546883 0.008773597 0.5176363 1.98955149 EHI01272 0.12521297 0.004006385 0.6499615 2.73090343 EHI01273 0.18374616 0.099650655 1.1683174 3.70517179 EHI01339 0.21133261 0.082072269 1.0958456 4.01574329 EHI01340 0.32934907 0.078517930 2.2365738 0.01091408 EHI01341 0.26571726 0.023522716 1.3209604 3.21859599 EHI01342 0.21296031 0.114741396 1.6557153 3.12134276 EHI01343 0.18906343 0.112255644 1.1418032 3.97856774 EHI01345 0.20874962 0.177845762 1.5032861 3.47998475 EHI01387 0.23576644 4.644537522 0.4353141 1.57377576 EHI01389 0.22833259 0.150555697 1.5157673 4.06490864 EHI02064 0.36180367 0.073958684 1.7560470 3.13915797 EHI02074 0.17452029 0.007193557 0.5946409 1.57287231 EHI02082 0.39485375 0.094697133 1.6620324 4.43909934 EHI02098 0.52162812 0.139932802 1.6241102 3.79457081 EHI02760 0.27278081 0.117175084 0.5856983 2.76896198 EHI02766 0.34206992 0.026262224 1.0131013 3.38893828 EHI02767 0.39776392 0.027589923 1.4920663 4.50953237 EHI02768 0.37285123 0.057921344 0.6534089 2.85662184 EHI02769 0.23901114 0.015625837 0.5237186 1.80651100 EHI02770 0.26006960 0.015636651 0.8099749 2.58298046 EHI02771 0.43362442 0.078674560 0.8927819 3.75367475 EHI02772 0.39350819 0.133333189 0.9955418 3.97147448 EHI02773 0.47175703 0.004630464 1.2818831 4.30891829 EHI02774 0.35219413 0.031638370 0.9683903 3.44730645 EHI02775 0.31535990 0.006253892 1.2347646 3.06181082 EHI02776 0.28106302 0.008270565 0.8075659 3.52331025 EHI02779 0.34735466 0.029550201 0.7625330 2.52847910 EHI02780 0.33353488 0.041239947 1.1610012 3.29078029 EHI02784 0.31121206 0.019685481 0.8413476 3.58321420 EHI02785 0.32741021 0.014638539 0.9515597 3.36888357 EHI02789 0.42120190 0.170396074 1.0281381 4.40650732 EHI02792 0.36123108 0.015462248 1.3463286 3.76356741 EHI02796 1.07935523 0.004050961 1.0416445 4.15780523 EHI02797 0.41305976 0.086506413 0.8415216 3.53097613 EHI02801 0.52781243 0.036344570 0.8388848 2.91079981 EHI02804 0.42394759 0.159371043 1.0649697 4.43245152 EHI02806 0.44246621 0.089581175 1.7887921 4.03903963 EHI02811 0.29358681 0.013750538 1.1729986 3.28550574 EHI02812 0.36744061 0.057112125 0.8678336 4.12914616 EHI02817 0.34058911 0.023035237 0.8059566 2.90095167 EHI02819 0.23782849 0.002853452 2.0747359 1.56371986 EHI02822 0.32932578 0.266269016 0.8566608 2.91142265 EHI02823 0.46831299 0.319368041 0.9890243 4.23615481 EHI02824 0.92746482 0.011070271 0.9754646 2.92498444 EHI02826 0.44208850 0.043681080 0.9461530 4.12595664 EHI02829 0.61719061 0.020333202 1.0838773 5.08522117 EHI02830 0.63356691 1.608315016 0.8548023 3.32875927 EHI02831 0.48579678 0.249927066 1.0747457 3.71679223 EHI02832 0.55980508 0.002363983 1.1179965 3.46662093 EHI02835 0.36642675 0.046904442 1.3031776 4.02345778 EHI02836 0.73282342 0.011061548 0.7145331 2.22777765 EHI02837 0.63165003 0.233233891 1.2696173 4.08635940 EHI02838 0.71576136 0.008130997 1.6067697 4.58593636 EHI02839 0.53704346 0.005429642 1.1846421 5.22051908 EHI02840 0.40520960 0.170732154 0.9714674 4.15870634 EHI02841 0.54078237 0.066720106 1.3402000 4.38657015 EHI02843 0.51124373 0.025768852 1.0209520 3.79170293 EHI02844 0.33724044 0.257831962 1.1673368 2.84963063 EHI02845 0.41473841 0.000195490 0.5934703 2.25767567 EHI02846 0.43528710 0.009803089 0.4380401 2.07829540 sequence_fractions %&gt;% mutate_at(vars(-sample), ~./1000000000) %&gt;% rename(&quot;Sample&quot;=1, &quot;Low quality&quot;=2, &quot;Mapped to host&quot;=3, &quot;Unmapped&quot;=4, &quot;Mapped to MAGs&quot;=5) %&gt;% summarise(across(where(is.numeric), mean, na.rm = TRUE)) %&gt;% tt() .table td.tinytable_css_w2od5493brp2rqp72ce9, .table th.tinytable_css_w2od5493brp2rqp72ce9 { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_b1ox23c9zej7c76athhc, .table th.tinytable_css_b1ox23c9zej7c76athhc { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } Low quality Mapped to host Unmapped Mapped to MAGs 0.3650321 0.1481815 1.08684 3.461414 sequence_fractions %&gt;% pivot_longer(!sample, names_to = &quot;fraction&quot;, values_to = &quot;value&quot;) %&gt;% mutate(value = value / 1000000000) %&gt;% mutate(fraction = factor(fraction, levels = c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;))) %&gt;% ggplot(., aes(x = sample, y = value, fill=fraction)) + geom_bar(position=&quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(name=&quot;Sequence type&quot;, breaks=c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;), labels=c(&quot;Low quality&quot;,&quot;Mapped to host&quot;,&quot;Unmapped&quot;,&quot;Mapped to MAGs&quot;), values=c(&quot;#CCCCCC&quot;, &quot;#bcdee1&quot;, &quot;#d8b8a3&quot;,&quot;#93655c&quot;))+ labs(x = &quot;Samples&quot;, y = &quot;Amount of data (GB)&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;bottom&quot;) 5.7 Recovered microbial fraction singlem_table &lt;- sequence_fractions %&gt;% mutate(mags_proportion = round((mags_bases / (mags_bases + unmapped_bases))*100,2)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(singlem_proportion = round(singlem_fraction,2)) %&gt;% select(sample,mags_proportion,singlem_proportion) %&gt;% mutate(mags_proportion = ifelse(singlem_proportion == 0, 0, mags_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion == 0, NA, singlem_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion &lt; mags_proportion, NA, singlem_proportion)) %&gt;% #if singlem is smaller, then NA, to simplify plot mutate(singlem_proportion = ifelse(singlem_proportion &gt; 100, 100, singlem_proportion)) #simplify singlem_table %&gt;% pivot_longer(!sample, names_to = &quot;proportion&quot;, values_to = &quot;value&quot;) %&gt;% mutate(proportion = factor(proportion, levels = c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;))) %&gt;% ggplot(., aes(x = value, y = sample, color=proportion)) + geom_line(aes(group = sample), color = &quot;#f8a538&quot;) + geom_point() + scale_color_manual(name=&quot;Proportion&quot;, breaks=c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;), labels=c(&quot;Recovered&quot;,&quot;Estimated&quot;), values=c(&quot;#52e1e8&quot;, &quot;#876b53&quot;))+ theme_classic() + labs(y = &quot;Samples&quot;, x = &quot;Prokaryotic fraction (%)&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;right&quot;) #3 MAGS_Catalouge ##3.1 Genom Phylogeny 5.7.1 Load data load(&quot;data/data.Rdata&quot;) 5.7.2 Generate the phylum color heatmap # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) Rows: 202 Columns: 2 ── Column specification ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── Delimiter: &quot;\\t&quot; chr (2): phylum, colors ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=20, size=0.2) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** Scale for y is already present. Adding another scale for y, which will replace the existing scale. 5.7.3 Build circular tree ###Build basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** Scale for y is already present. Adding another scale for y, which will replace the existing scale. 5.7.4 Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) Scale for y is already present. Adding another scale for y, which will replace the existing scale. Scale for fill is already present. Adding another scale for fill, which will replace the existing scale. 5.7.5 Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() 5.7.6 Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) 5.7.7 Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) 5.7.8 Generate tree (without labels) ggsave(&quot;clean_circular_tree_large.png&quot;, plot=circular_tree, dpi=600, width=80, height=80, limitsize = FALSE, units = &quot;cm&quot;) #Plot circular tree circular_tree %&gt;% open_tree(15) %&gt;% rotate_tree(90) ##3.2 Genom Quality genome_metadata$completeness %&gt;% mean() [1] 79.39899 genome_metadata$completeness %&gt;% sd() [1] 16.76617 genome_metadata$contamination %&gt;% mean() [1] 2.7918 genome_metadata$contamination %&gt;% sd() [1] 2.581989 5.7.9 Genom biplot genome_biplot &lt;- genome_metadata %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) 5.7.10 Genome contamination genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) 5.7.11 Genome completness genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) ###Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) ##3.3 Functional Overview 5.7.12 Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) ###Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** ###Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) Scale for y is already present. Adding another scale for y, which will replace the existing scale. Scale for fill is already present. Adding another scale for fill, which will replace the existing scale. ###Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() ###Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) Scale for y is already present. Adding another scale for y, which will replace the existing scale. Scale for fill is already present. Adding another scale for fill, which will replace the existing scale. ###Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) Warning in geom_segment(size = 0.2, colour = &quot;grey&quot;, alpha = 1, lineend = &quot;butt&quot;, : Ignoring unknown parameters: `axis`, `text.size`, and `nbreak` Scale for fill is already present. Adding another scale for fill, which will replace the existing scale. function_tree ##3.4 Functional Ordination 5.7.13 Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) 5.7.14 Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination #Community composition load(&quot;data/data.Rdata&quot;) ##5.1 Taxonomy Overview 5.7.15 5.1.1 Stacked Barplot genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(!is.na(count)) %&gt;% ggplot(aes(y=count,x=sample, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + labs(x = &quot;Relative abundance&quot;, y =&quot;Samples&quot;) + facet_nested(. ~ species.y + sample_type , scales=&quot;free&quot;, space=&quot;free&quot;) + #facet per day and treatment scale_y_continuous(expand = c(0.001, 0.001)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.position = &quot;none&quot;, strip.background.x=element_rect(color = NA, fill= &quot;#f4f4f4&quot;)) ###5.1.2 Phylum relative abundances phylum_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum) %&gt;% summarise(relabun=sum(count)) `summarise()` has grouped output by &#39;sample&#39;. You can override using the `.groups` argument. phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% arrange(-mean) %&gt;% tt() .table td.tinytable_css_zo1f7gk1xyc1xewpvsgg, .table th.tinytable_css_zo1f7gk1xyc1xewpvsgg { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_vg61m30gf371q9uobt59, .table th.tinytable_css_vg61m30gf371q9uobt59 { border-bottom: solid #d3d8dc 0.1em; } phylum mean sd p__Actinomycetota NaN NA p__Bacillota NaN NA p__Bacillota_A NaN NA p__Bacillota_B NaN NA p__Bacillota_C NaN NA p__Bacteroidota NaN NA p__Campylobacterota NaN NA p__Cyanobacteriota NaN NA p__Desulfobacterota NaN NA p__Methanobacteriota NaN NA p__Pseudomonadota NaN NA p__Spirochaetota NaN NA p__Synergistota NaN NA p__Thermoplasmatota NaN NA p__Verrucomicrobiota NaN NA phylum_arrange &lt;- phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun)) %&gt;% arrange(-mean) %&gt;% select(phylum) %&gt;% pull() phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) + scale_color_manual(values=phylum_colors[rev(phylum_arrange)]) + geom_jitter(alpha=0.5) + theme_minimal() + theme(legend.position=&quot;none&quot;) + labs(y=&quot;Phylum&quot;,x=&quot;Relative abundance&quot;) Warning: Removed 15 rows containing missing values or values outside the scale range (`geom_point()`). ##5.2 Taxonomy boxplot ###5.2.1 Family family_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,family) %&gt;% summarise(relabun=sum(count)) `summarise()` has grouped output by &#39;sample&#39;. You can override using the `.groups` argument. family_summary %&gt;% filter(!is.na(relabun)) %&gt;% group_by(family) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% mutate(family= sub(&quot;^f__&quot;, &quot;&quot;, family)) %&gt;% arrange(-mean) %&gt;% tt() .table td.tinytable_css_ncpiy94jie9u3jo9glsy, .table th.tinytable_css_ncpiy94jie9u3jo9glsy { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_aes7uo3k6ixcmzup88x9, .table th.tinytable_css_aes7uo3k6ixcmzup88x9 { border-bottom: solid #d3d8dc 0.1em; } family mean sd Lachnospiraceae 2.820517e-01 0.0999780742 Oscillospiraceae 1.122302e-01 0.0815808792 Bacteroidaceae 1.069602e-01 0.1105489789 CAG-288 8.635384e-02 0.1525110147 Borkfalkiaceae 7.439248e-02 0.0529468961 Ruminococcaceae 5.429002e-02 0.0476163724 CAG-508 4.042322e-02 0.0435938119 Dethiosulfovibrionaceae 2.453667e-02 0.0162594046 Muribaculaceae 2.053109e-02 0.0424882062 UBA932 1.965659e-02 0.0377246470 Akkermansiaceae 1.931762e-02 0.0149946006 Gastranaerophilaceae 1.537417e-02 0.0238480219 UBA660 1.499409e-02 0.0274338383 Acidaminococcaceae 1.115730e-02 0.0065828041 RUG14156 1.086574e-02 0.0166297926 CAG-274 8.975535e-03 0.0099495329 Methanomethylophilaceae 8.683757e-03 0.0148739047 Helicobacteraceae 8.501676e-03 0.0156705943 UBA1242 7.763918e-03 0.0101198264 Desulfovibrionaceae 6.806558e-03 0.0069746984 UMGS1883 6.004384e-03 0.0049109017 UBA1381 5.833560e-03 0.0062700557 Burkholderiaceae_A 5.766652e-03 0.0055980910 Eggerthellaceae 5.681557e-03 0.0113831512 CAG-272 4.601013e-03 0.0064275983 Coprobacillaceae 4.390049e-03 0.0053854588 Acutalibacteraceae 4.368027e-03 0.0044860928 Enterobacteriaceae 4.330308e-03 0.0211349219 Synergistaceae 4.026572e-03 0.0052475324 Rikenellaceae 3.616334e-03 0.0074186742 Monoglobaceae 2.238681e-03 0.0064408538 CAG-465 1.966994e-03 0.0047213480 QAMH01 1.808318e-03 0.0053750357 Sphaerochaetaceae 1.678475e-03 0.0060126568 Tannerellaceae 1.518699e-03 0.0027548679 UBA953 1.421967e-03 0.0047181196 Paludibacteraceae 1.086028e-03 0.0065779961 Butyricicoccaceae 1.063978e-03 0.0028441951 CAG-239 9.079982e-04 0.0049028826 UBA3637 5.444726e-04 0.0014419039 Burkholderiaceae 5.247672e-04 0.0010190488 Mycoplasmoidaceae 4.507771e-04 0.0038249703 Anaerotignaceae 4.382504e-04 0.0004324706 CAG-449 3.253974e-04 0.0027610888 Methanobacteriaceae 2.973867e-04 0.0006131039 Anaerovoracaceae 2.243837e-04 0.0005026245 2.202929e-04 0.0006369072 Treponemataceae 2.153451e-04 0.0008301886 Peptococcaceae 2.028458e-04 0.0004302620 Selenomonadaceae 1.728283e-04 0.0014664966 Campylobacteraceae 1.609987e-04 0.0008815823 CAG-74 4.632041e-05 0.0003930417 family_arrange &lt;- family_summary %&gt;% filter(!is.na(relabun)) %&gt;% group_by(family) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(family) %&gt;% mutate(family= sub(&quot;^f__&quot;, &quot;&quot;, family)) %&gt;% pull() family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% mutate(family= sub(&quot;^f__&quot;, &quot;&quot;, family)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[-8]) + scale_fill_manual(values=phylum_colors[-8]) + #geom_boxplot(alpha=0.2) + geom_jitter(alpha=0.5) + facet_nested(. ~ species + sample_type)+ theme_minimal() + theme(legend.position = &quot;none&quot;) ###5.2.2 Genus genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,genus) %&gt;% summarise(relabun=sum(count)) %&gt;% filter(genus != &quot;g__&quot;) `summarise()` has grouped output by &#39;sample&#39;. You can override using the `.groups` argument. genus_summary %&gt;% filter(!is.na(relabun)) %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% arrange(-mean) %&gt;% tt() .table td.tinytable_css_tc4t2lqi3ocllta0pxie, .table th.tinytable_css_tc4t2lqi3ocllta0pxie { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_pwsnv5sz9lh5x2fgtngj, .table th.tinytable_css_pwsnv5sz9lh5x2fgtngj { border-bottom: solid #d3d8dc 0.1em; } genus mean sd g__Prevotella 9.080547e-02 0.1053438427 g__Enterosoma 8.635384e-02 0.1525110147 g__Coproplasma 6.807112e-02 0.0500238487 g__RGIG6307 5.318528e-02 0.0483973075 g__Onthomonas 4.353497e-02 0.0322816204 g__Ventrimonas 4.342041e-02 0.0543011125 g__Eubacterium_I 3.268620e-02 0.0254906098 g__Choladousia 2.622102e-02 0.0166813369 g__Faeciplasma 2.600236e-02 0.0319677016 g__Agathobacter 2.500766e-02 0.0280651060 g__Pyramidobacter 2.453667e-02 0.0162594046 g__Faecousia 2.351393e-02 0.0526474790 g__SIG308 2.040683e-02 0.0224976141 g__Cryptobacteroides 1.965659e-02 0.0377246470 g__Akkermansia 1.931762e-02 0.0149946006 g__Faecalibacterium 1.866517e-02 0.0263149815 g__CAG-269 1.588676e-02 0.0234805669 g__Scatovivens 1.496372e-02 0.0170833506 g__Coprococcus 1.369155e-02 0.0155170771 g__JAJPXI01 1.314828e-02 0.0174441964 g__UBA4292 1.207710e-02 0.0153373737 g__Phascolarctobacterium_A 1.115730e-02 0.0065828041 g__VSOB01 1.004899e-02 0.0201472586 g__CAG-873 9.164935e-03 0.0216383412 g__RGIG7114 8.982287e-03 0.0173522583 g__COE1 8.651165e-03 0.0090415658 g__UBA71 8.612684e-03 0.0148775681 g__Avigastranaerophilus 7.918453e-03 0.0121444400 g__NHYM01 7.837837e-03 0.0151182563 g__JAJPXC01 7.566976e-03 0.0260196196 g__Galligastranaerophilus_A 7.398685e-03 0.0115659570 g__Phocaeicola 7.051724e-03 0.0184263153 g__Acetatifactor 6.993629e-03 0.0092080932 g__JAJQCF01 6.406651e-03 0.0079562943 g__Desulfovibrio 6.375869e-03 0.0068827733 g__JAJQCX01 5.720485e-03 0.0048448460 g__Onthocola_B 5.514206e-03 0.0093119989 g__RGIG5612 5.448731e-03 0.0146639378 g__Caccovivens 4.698628e-03 0.0065480562 g__UMGS1766 4.635484e-03 0.0081156605 g__JAJQCI01 4.575672e-03 0.0074347064 g__DTU064 4.483670e-03 0.0063929556 g__JAJQDJ01 4.349306e-03 0.0053820686 g__Escherichia 4.330308e-03 0.0211349219 g__SIG200 3.984332e-03 0.0180862533 g__Mediterranea 3.810411e-03 0.0223762230 g__JAJQBJ01 3.504921e-03 0.0072082711 g__CAJFUR01 3.322522e-03 0.0090408315 g__E4-60 3.142866e-03 0.0050017723 g__RUG14156 3.053725e-03 0.0060740969 g__CAJOIG01 2.953167e-03 0.0063769621 g__Sutterella 2.915220e-03 0.0052455661 g__CAG-632 2.805076e-03 0.0093452290 g__Ruminococcus_D 2.787069e-03 0.0102700422 g__Bacteroides 2.749599e-03 0.0047595916 g__Paramuribaculum 2.654012e-03 0.0061669206 g__Butyribacter 2.430208e-03 0.0040770371 g__Anaerobutyricum 2.410082e-03 0.0032571427 g__SIG32 2.381032e-03 0.0165369990 g__Mesosutterella 2.311082e-03 0.0033297143 g__Monoglobus 2.238681e-03 0.0064408538 g__JAAWPK01 2.176957e-03 0.0038659701 g__CAG-353 2.098552e-03 0.0065032769 g__CAG-273 2.051734e-03 0.0048170989 g__Gallimonas 1.980940e-03 0.0036419395 g__CAG-465 1.966994e-03 0.0047213480 g__UMGS1519 1.925145e-03 0.0061366230 g__Scatousia 1.899921e-03 0.0045550453 g__Eubacterium_R 1.851796e-03 0.0025603109 g__RUG11788 1.811049e-03 0.0040592472 g__12844 1.795057e-03 0.0036476072 g__UBA3282 1.783873e-03 0.0053426521 g__Alistipes 1.761518e-03 0.0034300609 g__CAG-492 1.699764e-03 0.0036763055 g__Bullifex 1.678475e-03 0.0060126568 g__Eisenbergiella 1.628843e-03 0.0074887951 g__RGIG1681 1.594369e-03 0.0033679724 g__UBA1381 1.561694e-03 0.0017386624 g__Parabacteroides 1.518699e-03 0.0027548679 g__RGIG9113 1.512028e-03 0.0054458634 g__CAG-56 1.500955e-03 0.0030587504 g__Spyradosoma 1.421967e-03 0.0047181196 g__CAG-196 1.419527e-03 0.0040037896 g__UMGS1994 1.335174e-03 0.0027439575 g__CACZQA01 1.329053e-03 0.0043561740 g__Ruminococcus_C 1.313877e-03 0.0023898469 g__UBA2882 1.285722e-03 0.0055723921 g__Ruminococcus_E 1.280378e-03 0.0021094034 g__UMGS1601 1.243313e-03 0.0024783761 g__Eubacterium_F 1.099842e-03 0.0028076894 g__HGM11788 1.075462e-03 0.0034591542 g__Butyricicoccus_A 1.063978e-03 0.0028441951 g__RUG11198 9.369810e-04 0.0032844297 g__Caccocola 8.837056e-04 0.0014681359 g__Onthoplasma 8.667878e-04 0.0035077907 g__CAG-115 8.561722e-04 0.0036004968 g__Phocaeicola_A 8.354251e-04 0.0023977042 g__Ventrenecus 7.854107e-04 0.0020919108 g__UBA4372 7.519494e-04 0.0063805024 g__Roseburia 7.512946e-04 0.0040965409 g__UBA1081 7.488764e-04 0.0014951299 g__CALUTH01 6.739103e-04 0.0029978053 g__RF16 6.501426e-04 0.0041348358 g__CAG-95 6.281570e-04 0.0037478765 g__JALEPO01 5.748493e-04 0.0025272601 g__UBA7488 5.444726e-04 0.0014419039 g__JAJPXW01 5.403505e-04 0.0011395035 g__CAG-267 5.340543e-04 0.0045316010 g__Oxalobacter 5.247672e-04 0.0010190488 g__CAG-41 5.216336e-04 0.0019510814 g__Ruminococcus 5.193219e-04 0.0013373591 g__TWA4 5.160544e-04 0.0014282481 g__Eubacterium_G 5.119453e-04 0.0015389733 g__Fimousia 4.844252e-04 0.0012852554 g__Merdisoma 4.751659e-04 0.0006272855 g__CAG-433 4.747840e-04 0.0017915600 g__CAG-793 4.597817e-04 0.0017675594 g__MGBC110633 4.507771e-04 0.0038249703 g__UBA2883 4.451448e-04 0.0016159687 g__Metalachnospira 4.382504e-04 0.0004324706 g__UBA1754 4.358857e-04 0.0036986126 g__Gallispira 4.351802e-04 0.0018591674 g__Bilophila 4.306893e-04 0.0005969952 g__Zag111 4.186061e-04 0.0024397029 g__Duncaniella 3.843416e-04 0.0032612466 g__CAG-303 3.792611e-04 0.0011865666 g__JAFUYI01 3.739439e-04 0.0019768379 g__CAKPSH01 3.668912e-04 0.0015109015 g__Helicobacter_D 3.513512e-04 0.0029813136 g__Coprovivens 3.489347e-04 0.0010501600 g__Rikenella 3.427881e-04 0.0008107949 g__Limivicinus 3.418589e-04 0.0025688250 g__Alloprevotella 3.367797e-04 0.0011092397 g__UBA3210 3.253974e-04 0.0027610888 g__RGIG8745 3.185009e-04 0.0027025697 g__CAG-485 3.146228e-04 0.0026696627 g__Helicobacter_A 3.124885e-04 0.0008818700 g__Caccenecus 3.058655e-04 0.0009092041 g__RGIG4079 3.025176e-04 0.0022889255 g__Methanosphaera 2.973867e-04 0.0006131039 g__UMGS1933 2.850921e-04 0.0014739759 g__JAFLUQ01 2.838986e-04 0.0018361345 g__RUG11867 2.698301e-04 0.0011139195 g__Ornithomonoglobus 2.423024e-04 0.0005036392 g__Coprosoma 2.358185e-04 0.0008538915 g__HGM13006 2.291140e-04 0.0006033910 g__Stercorousia 2.175806e-04 0.0010437370 g__RGIG4074 2.158915e-04 0.0007545165 g__UBA7185 2.028458e-04 0.0004302620 g__UBA4716 2.013233e-04 0.0006664695 g__Blautia_A 2.001792e-04 0.0005997860 g__UMGS363 1.991771e-04 0.0010798935 g__RGIG250 1.728283e-04 0.0014664966 g__Eubacterium_S 1.683922e-04 0.0008652992 g__RGIG423 1.644181e-04 0.0005745476 g__Choladocola 1.612945e-04 0.0004747300 g__Campylobacter_D 1.609987e-04 0.0008815823 g__Alangreenwoodia 1.491023e-04 0.0004257494 g__UBA7173 1.436847e-04 0.0012192048 g__RUG115 1.420242e-04 0.0012051157 g__CALWPC01 1.349056e-04 0.0005948116 g__JALFVM01 1.345938e-04 0.0005947968 g__ISDg 1.213042e-04 0.0006403442 g__CAKSQF01 1.173427e-04 0.0003920013 g__RUG626 1.114926e-04 0.0008691835 g__CAG-170 1.033544e-04 0.0006482334 g__CAKVOD01 8.790136e-05 0.0007458678 g__RGIG6919 8.126741e-05 0.0004452205 g__UMGS973 7.528139e-05 0.0002334019 g__Methanomethylophilus 7.107378e-05 0.0005587306 g__UMGS1663 5.759887e-05 0.0004887426 g__Limiplasma 4.632041e-05 0.0003930417 genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% filter(genus != &quot;g__&quot;)%&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% pull() genus_summary %&gt;% left_join(genome_metadata %&gt;% select(genus,phylum) %&gt;% unique(),by=join_by(genus==genus)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% filter(genus %in% genus_arrange[1:20]) %&gt;% mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors) + #geom_boxplot() + geom_jitter(alpha=0.5) + facet_nested(. ~ species + sample_type)+ theme_minimal() ##5.3 Alpha diversity # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) Neutral Hill numbers of q0 neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) Neutral Hill numbers of q1 phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) Phylogenetic Hill numbers of q1 # Aggregate basal GIFT into elements dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) functional &lt;- genome_counts_filt %&gt;% filter(genome %in% labels(dist)[[1]]) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) Functional Hill numbers of q1 # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;,&quot;functional&quot;))) %&gt;% unite(&quot;group&quot;, c(species,sample_type), remove = FALSE) %&gt;% ggplot(aes(y = value, x = group, group=group, color=group, fill=group)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Group&quot;, breaks=c(&quot;Cathartes aura_Colon contents&quot;,&quot;Coragyps atratus_Colon contents&quot;,&quot;Cathartes aura_Stomach contents&quot;,&quot;Coragyps atratus_Stomach contents&quot;), labels=c(&quot;Cathartes aura (colon)&quot;,&quot;Coragyps atratus (colon)&quot;,&quot;Cathartes aura (stomach)&quot;,&quot;Coragyps atratus (stomach)&quot;), values=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;,&quot;#e2815a&quot;, &quot;#876b96&quot;)) + scale_fill_manual(name=&quot;Group&quot;, breaks=c(&quot;Cathartes aura_Colon contents&quot;,&quot;Coragyps atratus_Colon contents&quot;,&quot;Cathartes aura_Stomach contents&quot;,&quot;Coragyps atratus_Stomach contents&quot;), labels=c(&quot;Cathartes aura (colon)&quot;,&quot;Coragyps atratus (colon)&quot;,&quot;Cathartes aura (stomach)&quot;,&quot;Coragyps atratus (stomach)&quot;), values=c(&quot;#e5bd5b50&quot;, &quot;#6b739850&quot;,&quot;#e2815a50&quot;, &quot;#876b9650&quot;)) + facet_wrap(. ~ metric, scales = &quot;free&quot;, ncol=4) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank()) Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0. ℹ Please use the `linewidth` argument instead. This warning is displayed once every 8 hours. Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. ##5.4 Beta diversity beta_q0n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 0) The estimated time for calculating the 2628 pairwise combinations is 8 seconds. beta_q1n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1) The estimated time for calculating the 2628 pairwise combinations is 10 seconds. beta_q1p &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1, tree = genome_tree) The estimated time for calculating the 2628 pairwise combinations is 2511 seconds. beta_q1f &lt;- genome_counts_filt %&gt;% filter(genome %in% labels(dist)[[1]]) %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1, dist = dist) The estimated time for calculating the 2628 pairwise combinations is 125 seconds. #Richness betadisper(beta_q0n$C, sample_metadata$region) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 15 0.53710 0.035807 3.7714 999 0.001 *** Residuals 57 0.54118 0.009494 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Dip River, Tasmania Dryandra Forth, Tasmania Friendly Beaches, Tasmania Green Beach, Tasmania Dip River, Tasmania 1.1000e-02 1.5000e-01 3.3600e-01 1.5000e-02 Dryandra 9.6891e-03 8.0000e-02 1.1000e-02 2.8000e-02 Forth, Tasmania 1.5584e-01 6.8378e-02 6.3000e-02 2.2600e-01 Friendly Beaches, Tasmania 3.3699e-01 1.1085e-02 5.0935e-02 1.3000e-02 Green Beach, Tasmania 1.5211e-02 3.2460e-02 2.3020e-01 1.2924e-02 Ikara-Flinders Ranges National Park 2.3291e-01 7.5413e-02 9.2388e-02 3.7961e-01 7.2015e-02 Inglis River, Tasmania 5.6274e-01 1.0115e-03 1.6892e-01 1.2706e-01 3.1798e-03 Mersey Forests, Tasmania 1.1656e-01 4.0049e-02 9.8150e-01 4.0407e-02 1.6951e-01 Mount William, Tasmania 4.0907e-01 1.0265e-31 5.5731e-01 2.1309e-01 1.6105e-02 Mountain River, Tasmania 3.4692e-02 3.6802e-03 7.2454e-03 2.1798e-01 2.1027e-03 Northern Midlands, Tasmania 5.6176e-01 6.6351e-02 1.6445e-01 9.1156e-01 7.5149e-02 Pioneer, Tasmania 5.1161e-01 4.3638e-02 4.7349e-01 1.6498e-01 9.2492e-02 Ringarooma, Tasmania 6.2633e-01 6.6867e-02 4.6467e-01 2.2159e-01 1.2482e-01 Rocky Cape, Tasmania 2.9169e-01 7.8316e-02 1.0086e-01 6.1904e-01 6.2816e-02 Tasmania 2.5451e-02 1.7736e-04 1.3223e-03 2.6529e-01 1.9907e-04 Warren 5.4202e-02 1.9213e-02 9.2851e-01 6.1870e-03 1.6220e-01 Ikara-Flinders Ranges National Park Inglis River, Tasmania Mersey Forests, Tasmania Mount William, Tasmania Dip River, Tasmania 2.1700e-01 5.9500e-01 1.0900e-01 4.0700e-01 Dryandra 8.3000e-02 2.0000e-03 2.8000e-02 1.0000e-03 Forth, Tasmania 8.1000e-02 1.8000e-01 9.8100e-01 5.5900e-01 Friendly Beaches, Tasmania 4.0100e-01 1.3100e-01 4.0000e-02 1.9100e-01 Green Beach, Tasmania 6.0000e-02 3.0000e-03 1.6500e-01 2.0000e-02 Ikara-Flinders Ranges National Park 1.4100e-01 8.1000e-02 2.8200e-01 Inglis River, Tasmania 1.3292e-01 1.1300e-01 4.7200e-01 Mersey Forests, Tasmania 8.9080e-02 1.1534e-01 4.7000e-01 Mount William, Tasmania 2.9500e-01 4.6584e-01 4.6568e-01 Mountain River, Tasmania 8.2869e-01 5.3663e-03 4.7339e-03 3.7075e-02 Northern Midlands, Tasmania 4.1403e-01 3.3111e-01 1.4828e-01 4.4036e-01 Pioneer, Tasmania 1.5709e-01 7.1378e-01 4.2781e-01 9.1712e-01 Ringarooma, Tasmania 1.7315e-01 8.4427e-01 4.2750e-01 8.7166e-01 Rocky Cape, Tasmania 7.0838e-01 1.4086e-01 8.9159e-02 3.1711e-01 Tasmania 5.2912e-01 3.2807e-03 8.8384e-04 1.9415e-02 Warren 1.1564e-02 7.4210e-02 9.4798e-01 4.2639e-01 Mountain River, Tasmania Northern Midlands, Tasmania Pioneer, Tasmania Ringarooma, Tasmania Dip River, Tasmania 3.6000e-02 6.0100e-01 5.0600e-01 6.6100e-01 Dryandra 3.0000e-03 6.0000e-02 2.9000e-02 6.2000e-02 Forth, Tasmania 9.0000e-03 1.7000e-01 4.7200e-01 4.8700e-01 Friendly Beaches, Tasmania 2.2800e-01 9.2000e-01 1.4300e-01 2.1700e-01 Green Beach, Tasmania 1.0000e-03 7.5000e-02 8.5000e-02 1.1700e-01 Ikara-Flinders Ranges National Park 8.2400e-01 4.3000e-01 1.3500e-01 1.7500e-01 Inglis River, Tasmania 6.0000e-03 3.3700e-01 7.2300e-01 8.7600e-01 Mersey Forests, Tasmania 4.0000e-03 1.3400e-01 4.2700e-01 4.3300e-01 Mount William, Tasmania 4.0000e-02 4.4800e-01 9.1200e-01 8.8300e-01 Mountain River, Tasmania 3.1700e-01 2.1000e-02 5.2000e-02 Northern Midlands, Tasmania 3.1715e-01 3.4700e-01 4.2400e-01 Pioneer, Tasmania 2.3403e-02 3.4640e-01 9.2200e-01 Ringarooma, Tasmania 3.9800e-02 4.0397e-01 9.2935e-01 Rocky Cape, Tasmania 7.3733e-01 6.5017e-01 1.9534e-01 2.3562e-01 Tasmania 5.6027e-01 3.1295e-01 8.6151e-03 1.5720e-02 Warren 2.4512e-04 3.8098e-02 2.9317e-01 2.7394e-01 Rocky Cape, Tasmania Tasmania Warren Dip River, Tasmania 2.8100e-01 2.3000e-02 0.060 Dryandra 7.9000e-02 1.0000e-03 0.023 Forth, Tasmania 9.3000e-02 2.0000e-03 0.910 Friendly Beaches, Tasmania 6.1600e-01 2.8100e-01 0.009 Green Beach, Tasmania 4.7000e-02 1.0000e-03 0.138 Ikara-Flinders Ranges National Park 6.9000e-01 5.4000e-01 0.011 Inglis River, Tasmania 1.1800e-01 3.0000e-03 0.069 Mersey Forests, Tasmania 7.7000e-02 1.0000e-03 0.949 Mount William, Tasmania 2.8800e-01 1.8000e-02 0.412 Mountain River, Tasmania 7.4900e-01 5.7700e-01 0.001 Northern Midlands, Tasmania 6.7400e-01 3.0200e-01 0.026 Pioneer, Tasmania 1.5000e-01 9.0000e-03 0.293 Ringarooma, Tasmania 2.2600e-01 1.3000e-02 0.269 Rocky Cape, Tasmania 9.1900e-01 0.012 Tasmania 9.3171e-01 0.001 Warren 1.3599e-02 2.1683e-05 adonis2(beta_q0n$C ~ region, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))) %&gt;% pull(sample)) %&gt;% broom::tidy() %&gt;% tt() &#39;nperm&#39; &gt;= set of all permutations: complete enumeration. Set of permutations &lt; &#39;minperm&#39;. Generating entire set. Warning in tidy.anova(.): The following column names in ANOVA output were not recognized or transformed: SumOfSqs, R2 .table td.tinytable_css_81xuy2wg6jtwyy0sjsd1, .table th.tinytable_css_81xuy2wg6jtwyy0sjsd1 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_7neif2zp35mwq5fpictv, .table th.tinytable_css_7neif2zp35mwq5fpictv { border-bottom: solid #d3d8dc 0.1em; } term df SumOfSqs R2 statistic p.value Model 15 14.539400 0.6457819 6.927852 1 Residual 57 7.975014 0.3542181 NA NA Total 72 22.514414 1.0000000 NA NA #Neutral diversity betadisper(beta_q1n$C, sample_metadata$region) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 15 0.53745 0.035830 2.4791 999 0.011 * Residuals 57 0.82382 0.014453 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Dip River, Tasmania Dryandra Forth, Tasmania Friendly Beaches, Tasmania Green Beach, Tasmania Dip River, Tasmania 7.0000e-03 1.3800e-01 6.3600e-01 6.5000e-02 Dryandra 9.5355e-03 9.9000e-02 2.5000e-02 2.4200e-01 Forth, Tasmania 1.4299e-01 8.9064e-02 1.0500e-01 5.8400e-01 Friendly Beaches, Tasmania 6.1856e-01 3.0310e-02 1.2032e-01 8.5000e-02 Green Beach, Tasmania 7.5165e-02 2.2013e-01 5.7343e-01 8.5622e-02 Ikara-Flinders Ranges National Park 3.2998e-01 5.0729e-02 9.1446e-02 4.9380e-01 8.4362e-02 Inglis River, Tasmania 8.6793e-01 3.5914e-03 1.2242e-01 4.9817e-01 5.2640e-02 Mersey Forests, Tasmania 2.3458e-01 1.4699e-01 9.3498e-01 1.6571e-01 5.8345e-01 Mount William, Tasmania 2.9302e-01 6.0473e-31 6.5726e-01 3.3512e-01 3.6741e-01 Mountain River, Tasmania 2.6388e-01 1.3626e-02 4.4295e-02 6.2995e-01 3.6461e-02 Northern Midlands, Tasmania 6.0186e-01 2.9873e-01 7.6350e-01 4.1120e-01 5.7919e-01 Pioneer, Tasmania 9.9454e-02 9.7125e-02 8.5477e-01 9.2222e-02 6.7558e-01 Ringarooma, Tasmania 2.5769e-01 1.0390e-01 8.2038e-01 1.8462e-01 4.8396e-01 Rocky Cape, Tasmania 4.1241e-01 5.3091e-02 1.0757e-01 7.4267e-01 9.5774e-02 Tasmania 2.8113e-01 5.3421e-04 1.1288e-02 7.9625e-01 5.5599e-03 Warren 1.5467e-01 3.8499e-02 7.8169e-01 6.8999e-02 3.7460e-01 Ikara-Flinders Ranges National Park Inglis River, Tasmania Mersey Forests, Tasmania Mount William, Tasmania Dip River, Tasmania 3.4700e-01 8.8000e-01 2.2200e-01 2.9000e-01 Dryandra 5.9000e-02 4.0000e-03 1.2700e-01 1.0000e-03 Forth, Tasmania 8.7000e-02 1.2500e-01 9.3600e-01 6.7200e-01 Friendly Beaches, Tasmania 4.8200e-01 5.0200e-01 1.3800e-01 3.2700e-01 Green Beach, Tasmania 9.2000e-02 6.5000e-02 5.9400e-01 3.8100e-01 Ikara-Flinders Ranges National Park 2.1800e-01 1.0000e-01 3.0200e-01 Inglis River, Tasmania 2.4309e-01 2.0400e-01 2.9900e-01 Mersey Forests, Tasmania 1.0882e-01 2.1258e-01 7.8200e-01 Mount William, Tasmania 2.8729e-01 2.7857e-01 7.8095e-01 Mountain River, Tasmania 7.6421e-01 1.6865e-01 7.5367e-02 1.4142e-01 Northern Midlands, Tasmania 2.1644e-01 6.0133e-01 8.1325e-01 9.8337e-01 Pioneer, Tasmania 7.5907e-02 7.9725e-02 8.1051e-01 5.3048e-01 Ringarooma, Tasmania 1.2158e-01 2.4072e-01 9.0084e-01 8.5300e-01 Rocky Cape, Tasmania 7.6144e-01 3.0138e-01 1.5508e-01 2.8086e-01 Tasmania 4.3148e-01 1.7021e-01 2.3673e-02 7.3271e-02 Warren 2.4998e-02 1.4640e-01 8.7743e-01 8.1569e-01 Mountain River, Tasmania Northern Midlands, Tasmania Pioneer, Tasmania Ringarooma, Tasmania Dip River, Tasmania 2.7300e-01 6.0800e-01 8.5000e-02 2.5100e-01 Dryandra 2.2000e-02 3.0100e-01 9.1000e-02 1.0500e-01 Forth, Tasmania 4.2000e-02 7.5200e-01 8.6900e-01 8.4700e-01 Friendly Beaches, Tasmania 6.3100e-01 4.0000e-01 8.2000e-02 1.7700e-01 Green Beach, Tasmania 4.1000e-02 5.7900e-01 6.7600e-01 4.9100e-01 Ikara-Flinders Ranges National Park 7.5800e-01 2.0600e-01 6.0000e-02 1.1500e-01 Inglis River, Tasmania 1.6400e-01 6.3000e-01 6.6000e-02 2.5400e-01 Mersey Forests, Tasmania 6.8000e-02 8.2400e-01 8.1600e-01 8.9100e-01 Mount William, Tasmania 1.4200e-01 9.8400e-01 5.5000e-01 8.5100e-01 Mountain River, Tasmania 2.6700e-01 3.5000e-02 8.9000e-02 Northern Midlands, Tasmania 2.8184e-01 7.0700e-01 8.8300e-01 Pioneer, Tasmania 3.2660e-02 6.8738e-01 7.0900e-01 Ringarooma, Tasmania 7.8434e-02 8.7488e-01 6.9216e-01 Rocky Cape, Tasmania 9.4226e-01 3.9387e-01 8.5803e-02 1.6194e-01 Tasmania 6.2952e-01 1.7098e-01 6.6810e-03 2.7781e-02 Warren 1.9637e-02 8.0983e-01 6.2440e-01 9.8998e-01 Rocky Cape, Tasmania Tasmania Warren Dip River, Tasmania 4.1200e-01 3.0500e-01 0.158 Dryandra 5.8000e-02 1.0000e-03 0.055 Forth, Tasmania 9.5000e-02 1.3000e-02 0.782 Friendly Beaches, Tasmania 7.3700e-01 8.2800e-01 0.063 Green Beach, Tasmania 9.7000e-02 7.0000e-03 0.391 Ikara-Flinders Ranges National Park 7.5200e-01 4.5900e-01 0.023 Inglis River, Tasmania 3.0600e-01 1.8200e-01 0.150 Mersey Forests, Tasmania 1.4200e-01 1.4000e-02 0.879 Mount William, Tasmania 2.7900e-01 7.6000e-02 0.792 Mountain River, Tasmania 9.3700e-01 6.2200e-01 0.022 Northern Midlands, Tasmania 3.8900e-01 1.6900e-01 0.825 Pioneer, Tasmania 8.0000e-02 1.1000e-02 0.631 Ringarooma, Tasmania 1.4400e-01 3.1000e-02 0.983 Rocky Cape, Tasmania 7.6600e-01 0.053 Tasmania 7.7006e-01 0.010 Warren 5.4232e-02 4.8360e-03 adonis2(beta_q1n$C ~ region, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))) %&gt;% pull(sample)) %&gt;% broom::tidy() %&gt;% tt() &#39;nperm&#39; &gt;= set of all permutations: complete enumeration. Set of permutations &lt; &#39;minperm&#39;. Generating entire set. Warning in tidy.anova(.): The following column names in ANOVA output were not recognized or transformed: SumOfSqs, R2 .table td.tinytable_css_qihu2foybw7kex9hey5h, .table th.tinytable_css_qihu2foybw7kex9hey5h { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } .table td.tinytable_css_anb0z188b1hmbm5lj1n4, .table th.tinytable_css_anb0z188b1hmbm5lj1n4 { border-bottom: solid #d3d8dc 0.1em; } term df SumOfSqs R2 statistic p.value Model 15 16.267339 0.6530224 7.151716 1 Residual 57 8.643504 0.3469776 NA NA Total 72 24.910843 1.0000000 NA NA #Phylogenetic diversity betadisper(beta_q1p$C, sample_metadata$region) %&gt;% permutest(., pairwise = TRUE) Warning in betadisper(beta_q1p$C, sample_metadata$region): some squared distances are negative and changed to zero Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 15 0.22854 0.015236 0.9374 999 0.534 Residuals 57 0.92643 0.016253 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Dip River, Tasmania Dryandra Forth, Tasmania Friendly Beaches, Tasmania Green Beach, Tasmania Dip River, Tasmania 1.7300e-01 9.3000e-02 9.1300e-01 2.2500e-01 Dryandra 1.8687e-01 4.4800e-01 6.3000e-02 5.9300e-01 Forth, Tasmania 1.0428e-01 4.3459e-01 2.6000e-02 8.1800e-01 Friendly Beaches, Tasmania 8.8717e-01 6.7153e-02 2.8568e-02 8.7000e-02 Green Beach, Tasmania 2.4095e-01 5.6320e-01 7.6457e-01 1.0690e-01 Ikara-Flinders Ranges National Park 5.3503e-01 4.2788e-01 2.8902e-01 5.0836e-01 3.8597e-01 Inglis River, Tasmania 4.8255e-01 4.7019e-02 3.9455e-02 2.7135e-01 2.0447e-01 Mersey Forests, Tasmania 2.2129e-01 5.3397e-01 6.8290e-01 9.8928e-02 9.2384e-01 Mount William, Tasmania 9.2752e-01 1.4407e-29 1.4554e-02 7.8573e-01 1.8413e-01 Mountain River, Tasmania 9.9843e-01 6.5441e-02 2.8952e-02 8.5829e-01 1.2645e-01 Northern Midlands, Tasmania 5.6326e-01 4.4421e-01 4.0201e-01 4.0859e-01 5.9536e-01 Pioneer, Tasmania 2.3670e-01 2.4828e-01 3.5834e-01 9.7750e-02 7.0972e-01 Ringarooma, Tasmania 2.1191e-01 3.7259e-01 5.2437e-01 8.6229e-02 8.3822e-01 Rocky Cape, Tasmania 8.0839e-01 3.3236e-01 1.9253e-01 8.4281e-01 3.3356e-01 Tasmania 5.4159e-01 1.5681e-01 7.6380e-02 5.5507e-01 1.5578e-01 Warren 1.6951e-01 5.8461e-02 7.4031e-02 5.4369e-02 2.9886e-01 Ikara-Flinders Ranges National Park Inglis River, Tasmania Mersey Forests, Tasmania Mount William, Tasmania Dip River, Tasmania 5.8600e-01 5.1400e-01 2.0400e-01 9.3100e-01 Dryandra 4.0400e-01 4.0000e-02 5.5200e-01 1.0000e-03 Forth, Tasmania 3.2700e-01 3.1000e-02 7.3000e-01 1.8000e-02 Friendly Beaches, Tasmania 5.5900e-01 2.8800e-01 6.3000e-02 8.1100e-01 Green Beach, Tasmania 3.6100e-01 1.7500e-01 9.2700e-01 1.5700e-01 Ikara-Flinders Ranges National Park 4.0300e-01 3.3700e-01 6.7700e-01 Inglis River, Tasmania 3.7467e-01 2.3600e-01 4.2000e-01 Mersey Forests, Tasmania 3.2426e-01 2.5003e-01 1.9200e-01 Mount William, Tasmania 6.4929e-01 4.0234e-01 2.2237e-01 Mountain River, Tasmania 5.3119e-01 3.3705e-01 1.2833e-01 8.8735e-01 Northern Midlands, Tasmania 4.1286e-01 8.5673e-01 6.0225e-01 6.7156e-01 Pioneer, Tasmania 3.4576e-01 2.6072e-01 8.0245e-01 1.3380e-01 Ringarooma, Tasmania 3.3177e-01 2.1887e-01 9.2612e-01 1.4678e-01 Rocky Cape, Tasmania 6.6913e-01 4.4297e-01 2.8642e-01 8.0996e-01 Tasmania 5.7227e-01 2.2908e-01 1.1903e-01 6.0367e-01 Warren 1.7968e-01 4.2280e-01 3.6931e-01 1.3998e-01 Mountain River, Tasmania Northern Midlands, Tasmania Pioneer, Tasmania Ringarooma, Tasmania Dip River, Tasmania 9.9900e-01 6.2700e-01 2.3800e-01 2.2200e-01 Dryandra 6.0000e-02 4.6100e-01 2.4400e-01 3.8600e-01 Forth, Tasmania 2.1000e-02 4.4300e-01 3.8200e-01 5.8400e-01 Friendly Beaches, Tasmania 8.8700e-01 4.6500e-01 8.6000e-02 6.8000e-02 Green Beach, Tasmania 1.2000e-01 6.2400e-01 7.4900e-01 8.7300e-01 Ikara-Flinders Ranges National Park 5.9400e-01 4.1800e-01 3.4400e-01 3.5300e-01 Inglis River, Tasmania 3.6700e-01 8.7800e-01 2.6300e-01 2.0700e-01 Mersey Forests, Tasmania 1.0100e-01 6.4800e-01 8.1500e-01 9.4100e-01 Mount William, Tasmania 9.1000e-01 7.0000e-01 1.1700e-01 1.4100e-01 Mountain River, Tasmania 5.5300e-01 1.0000e-01 9.4000e-02 Northern Midlands, Tasmania 5.0476e-01 7.2300e-01 6.6300e-01 Pioneer, Tasmania 1.1413e-01 6.8910e-01 8.8300e-01 Ringarooma, Tasmania 1.0423e-01 6.2338e-01 8.5488e-01 Rocky Cape, Tasmania 7.8449e-01 5.2581e-01 3.0532e-01 2.8381e-01 Tasmania 5.2278e-01 2.7006e-01 1.4060e-01 1.2424e-01 Warren 8.0094e-02 8.3758e-01 5.0782e-01 3.8532e-01 Rocky Cape, Tasmania Tasmania Warren Dip River, Tasmania 8.3900e-01 6.0500e-01 0.204 Dryandra 3.3600e-01 1.5000e-01 0.077 Forth, Tasmania 1.7400e-01 7.2000e-02 0.084 Friendly Beaches, Tasmania 8.8100e-01 6.1000e-01 0.055 Green Beach, Tasmania 3.4200e-01 1.6000e-01 0.281 Ikara-Flinders Ranges National Park 7.0700e-01 6.4700e-01 0.153 Inglis River, Tasmania 4.8500e-01 2.3100e-01 0.448 Mersey Forests, Tasmania 2.6900e-01 1.0400e-01 0.382 Mount William, Tasmania 8.3600e-01 5.8900e-01 0.145 Mountain River, Tasmania 8.2300e-01 5.6400e-01 0.067 Northern Midlands, Tasmania 5.6700e-01 2.8900e-01 0.854 Pioneer, Tasmania 2.9300e-01 1.3100e-01 0.524 Ringarooma, Tasmania 2.9200e-01 1.2600e-01 0.413 Rocky Cape, Tasmania 8.3800e-01 0.179 Tasmania 7.9988e-01 0.053 Warren 1.7705e-01 5.5055e-02 adonis2(beta_q1p$C ~ region, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))) %&gt;% pull(sample)) %&gt;% broom::tidy() %&gt;% tt() &#39;nperm&#39; &gt;= set of all permutations: complete enumeration. Set of permutations &lt; &#39;minperm&#39;. Generating entire set. Warning in tidy.anova(.): The following column names in ANOVA output were not recognized or transformed: SumOfSqs, R2 .table td.tinytable_css_t5z1ni1l0oodz26gkuni, .table th.tinytable_css_t5z1ni1l0oodz26gkuni { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_6yz252ymd9qel98fdhdq, .table th.tinytable_css_6yz252ymd9qel98fdhdq { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } term df SumOfSqs R2 statistic p.value Model 15 2.077708 0.5106392 3.965232 1 Residual 57 1.991130 0.4893608 NA NA Total 72 4.068838 1.0000000 NA NA adonis2(beta_q1f$C ~ region, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))) %&gt;% pull(sample)) %&gt;% broom::tidy() %&gt;% tt() &#39;nperm&#39; &gt;= set of all permutations: complete enumeration. Set of permutations &lt; &#39;minperm&#39;. Generating entire set. Warning in tidy.anova(.): The following column names in ANOVA output were not recognized or transformed: SumOfSqs, R2 .table td.tinytable_css_xkkhy1rmees1v7x6jyd0, .table th.tinytable_css_xkkhy1rmees1v7x6jyd0 { border-bottom: solid #d3d8dc 0.1em; } .table td.tinytable_css_jhf982ocme2izx33q096, .table th.tinytable_css_jhf982ocme2izx33q096 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; } term df SumOfSqs R2 statistic p.value Model 15 0.1505561 0.1282664 0.5591299 1 Residual 57 1.0232209 0.8717336 NA NA Total 72 1.1737770 1.0000000 NA NA ###Richness diversity plot beta_q0n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, verbosity = FALSE, trace=FALSE) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(region) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% mutate(sample=factor(sample, levels=c(&quot;Sg1&quot;,&quot;Sg2&quot;,&quot;Sg3&quot;,&quot;Sg4&quot;,&quot;Sg5&quot;,&quot;Sg6&quot;,&quot;Sg7&quot;,&quot;Sg8&quot;,&quot;Sg9&quot;,&quot;Sg10&quot;))) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = region, shape = sample)) + scale_shape_manual(values = 1:10) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Individual&quot;) Warning in vegan::metaMDS(., trymax = 500, k = 2, verbosity = FALSE, trace = FALSE): stress is (nearly) zero: you may have insufficient data Warning: Removed 73 rows containing missing values or values outside the scale range (`geom_point()`). ###Neutral diversity plot #{r Neutrality plot} beta_q1n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, verbosity = FALSE, trace=FALSE) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(region) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% mutate(individual=factor(individual, levels=c(&quot;Sg1&quot;,&quot;Sg2&quot;,&quot;Sg3&quot;,&quot;Sg4&quot;,&quot;Sg5&quot;,&quot;Sg6&quot;,&quot;Sg7&quot;,&quot;Sg8&quot;,&quot;Sg9&quot;,&quot;Sg10&quot;))) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = type, shape = individual)) + scale_color_manual(name=&quot;Sample type&quot;, breaks=c(&quot;cloaca&quot;,&quot;feces&quot;), labels=c(&quot;Cloaca&quot;,&quot;Faeces&quot;), values=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;)) + scale_shape_manual(values = 1:10) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Individual&quot;) ###5.4.3Phylogenetic diversity plot #{r phyloplot} beta_q1p$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, verbosity = FALSE, trace=FALSE) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(region) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% mutate(individual=factor(individual, levels=c(&quot;Sg1&quot;,&quot;Sg2&quot;,&quot;Sg3&quot;,&quot;Sg4&quot;,&quot;Sg5&quot;,&quot;Sg6&quot;,&quot;Sg7&quot;,&quot;Sg8&quot;,&quot;Sg9&quot;,&quot;Sg10&quot;))) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = type, shape = individual)) + scale_color_manual(name=&quot;Sample type&quot;, breaks=c(&quot;cloaca&quot;,&quot;feces&quot;), labels=c(&quot;Cloaca&quot;,&quot;Faeces&quot;), values=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;)) + scale_shape_manual(values = 1:10) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Individual&quot;) ###5.4.4 Functional diversity plot #{r Functionalplot} beta_q1p$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, verbosity = FALSE, trace=FALSE) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(region) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% mutate(individual=factor(individual, levels=c(&quot;Sg1&quot;,&quot;Sg2&quot;,&quot;Sg3&quot;,&quot;Sg4&quot;,&quot;Sg5&quot;,&quot;Sg6&quot;,&quot;Sg7&quot;,&quot;Sg8&quot;,&quot;Sg9&quot;,&quot;Sg10&quot;))) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = type, shape = individual)) + scale_color_manual(name=&quot;Sample type&quot;, breaks=c(&quot;cloaca&quot;,&quot;feces&quot;), labels=c(&quot;Cloaca&quot;,&quot;Faeces&quot;), values=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;)) + scale_shape_manual(values = 1:10) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Individual&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
